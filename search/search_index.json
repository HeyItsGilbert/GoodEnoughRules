{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"GoodEnoughRules A set of PSScriptAnalyzer rules that help make it Good Enough! Badges Downloads Version Publish Status Supported Platforms Overview These are rules that \"Good Enough\" Gilbert, slapped together after seeing someone or something that wanted it. These may not be appropriate for the standard set of rules so keep that in mind. You will probably want to enable individual rules vs all of them at once. I suggest taking a look at the documents to see what each rule does. Installation Install from the PowerShell Gallery : Install-PSResource GoodEnoughRules Documentation The docs are automatically generated from the rule comment based help. You can see the docs at HeyItsGilbert.GitHub.io/GoodEnoughRules Walk Through [!TIP] Use a \"proxy module\" to load all your different custom rules and check that into your repository. This helps you avoid having to hardcode to a specific module path. Install the module. Create a custom rule file: PSScriptAnalyzerRules.psm1 ```pwsh Proxy Module example $rules = Import-Module -Name 'GoodEnoughRules' -PassThru Export-ModuleMember -Function @($rules.ExportedCommands.Keys) ``` Import it into your PSScriptAnalyzer config: PSScriptAnalyzerSettings.psd1 ```pwsh @{ CustomRulePath = @( '.\\PSScriptAnalyzerRules.psm1' ) IncludeDefaultRules = $true IncludeRules = @( # Default rules 'PSAvoidDefaultValueForMandatoryParameter' 'PSAvoidDefaultValueSwitchParameter' # Custom rules 'Measure-*' ) } ``` If you're interested in learning more about the \"Proxy Module\" concept, see Sharing Your Custom PSScriptAnalyzer Rules Using PSDepend This module depends on PSScriptAnalyzer which means that it will install it if's not available. If you have different required versions in your PSDepend configuration that can cause conflict. I will try to avoid that by only requiring a minimum version.","title":"Home"},{"location":"#goodenoughrules","text":"A set of PSScriptAnalyzer rules that help make it Good Enough!","title":"GoodEnoughRules"},{"location":"#badges","text":"Downloads Version Publish Status Supported Platforms","title":"Badges"},{"location":"#overview","text":"These are rules that \"Good Enough\" Gilbert, slapped together after seeing someone or something that wanted it. These may not be appropriate for the standard set of rules so keep that in mind. You will probably want to enable individual rules vs all of them at once. I suggest taking a look at the documents to see what each rule does.","title":"Overview"},{"location":"#installation","text":"Install from the PowerShell Gallery : Install-PSResource GoodEnoughRules","title":"Installation"},{"location":"#documentation","text":"The docs are automatically generated from the rule comment based help. You can see the docs at HeyItsGilbert.GitHub.io/GoodEnoughRules","title":"Documentation"},{"location":"#walk-through","text":"[!TIP] Use a \"proxy module\" to load all your different custom rules and check that into your repository. This helps you avoid having to hardcode to a specific module path. Install the module. Create a custom rule file: PSScriptAnalyzerRules.psm1 ```pwsh","title":"Walk Through"},{"location":"#proxy-module-example","text":"$rules = Import-Module -Name 'GoodEnoughRules' -PassThru Export-ModuleMember -Function @($rules.ExportedCommands.Keys) ``` Import it into your PSScriptAnalyzer config: PSScriptAnalyzerSettings.psd1 ```pwsh @{ CustomRulePath = @( '.\\PSScriptAnalyzerRules.psm1' ) IncludeDefaultRules = $true IncludeRules = @( # Default rules 'PSAvoidDefaultValueForMandatoryParameter' 'PSAvoidDefaultValueSwitchParameter' # Custom rules 'Measure-*' ) } ``` If you're interested in learning more about the \"Proxy Module\" concept, see Sharing Your Custom PSScriptAnalyzer Rules","title":"Proxy Module example"},{"location":"#using-psdepend","text":"This module depends on PSScriptAnalyzer which means that it will install it if's not available. If you have different required versions in your PSDepend configuration that can cause conflict. I will try to avoid that by only requiring a minimum version.","title":"Using PSDepend"},{"location":"en-US/Measure-SecureStringWithKey/","text":"Measure-SecureStringWithKey SYNOPSIS Rule to detect if ConvertFrom-SecureString is used without a Key. SYNTAX Measure-SecureStringWithKey [-ScriptBlockAst] <ScriptBlockAst> [-ProgressAction <ActionPreference>] [<CommonParameters>] DESCRIPTION This rule detects if ConvertFrom-SecureString is used without a Key. EXAMPLES EXAMPLE 1 Measure-SecureStringWithKey -ScriptBlockAst $ScriptBlockAst This will check if the given ScriptBlockAst contains any ConvertFrom-SecureString commands without a Key parameter. PARAMETERS -ScriptBlockAst The scriptblock AST to check. Type: ScriptBlockAst Parameter Sets: (All) Aliases: Required: True Position: 1 Default value: None Accept pipeline input: False Accept wildcard characters: False -ProgressAction {{ Fill ProgressAction Description }} Type: ActionPreference Parameter Sets: (All) Aliases: proga Required: False Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS [System.Management.Automation.Language.ScriptBlockAst] OUTPUTS [Microsoft.Windows.PowerShell.ScriptAnalyzer.Generic.DiagnosticRecord[]] NOTES None RELATED LINKS","title":"Measure-SecureStringWithKey"},{"location":"en-US/Measure-SecureStringWithKey/#measure-securestringwithkey","text":"","title":"Measure-SecureStringWithKey"},{"location":"en-US/Measure-SecureStringWithKey/#synopsis","text":"Rule to detect if ConvertFrom-SecureString is used without a Key.","title":"SYNOPSIS"},{"location":"en-US/Measure-SecureStringWithKey/#syntax","text":"Measure-SecureStringWithKey [-ScriptBlockAst] <ScriptBlockAst> [-ProgressAction <ActionPreference>] [<CommonParameters>]","title":"SYNTAX"},{"location":"en-US/Measure-SecureStringWithKey/#description","text":"This rule detects if ConvertFrom-SecureString is used without a Key.","title":"DESCRIPTION"},{"location":"en-US/Measure-SecureStringWithKey/#examples","text":"","title":"EXAMPLES"},{"location":"en-US/Measure-SecureStringWithKey/#example-1","text":"Measure-SecureStringWithKey -ScriptBlockAst $ScriptBlockAst This will check if the given ScriptBlockAst contains any ConvertFrom-SecureString commands without a Key parameter.","title":"EXAMPLE 1"},{"location":"en-US/Measure-SecureStringWithKey/#parameters","text":"","title":"PARAMETERS"},{"location":"en-US/Measure-SecureStringWithKey/#-scriptblockast","text":"The scriptblock AST to check. Type: ScriptBlockAst Parameter Sets: (All) Aliases: Required: True Position: 1 Default value: None Accept pipeline input: False Accept wildcard characters: False","title":"-ScriptBlockAst"},{"location":"en-US/Measure-SecureStringWithKey/#-progressaction","text":"{{ Fill ProgressAction Description }} Type: ActionPreference Parameter Sets: (All) Aliases: proga Required: False Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False","title":"-ProgressAction"},{"location":"en-US/Measure-SecureStringWithKey/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"en-US/Measure-SecureStringWithKey/#inputs","text":"","title":"INPUTS"},{"location":"en-US/Measure-SecureStringWithKey/#systemmanagementautomationlanguagescriptblockast","text":"","title":"[System.Management.Automation.Language.ScriptBlockAst]"},{"location":"en-US/Measure-SecureStringWithKey/#outputs","text":"","title":"OUTPUTS"},{"location":"en-US/Measure-SecureStringWithKey/#microsoftwindowspowershellscriptanalyzergenericdiagnosticrecord","text":"","title":"[Microsoft.Windows.PowerShell.ScriptAnalyzer.Generic.DiagnosticRecord[]]"},{"location":"en-US/Measure-SecureStringWithKey/#notes","text":"None","title":"NOTES"},{"location":"en-US/Measure-SecureStringWithKey/#related-links","text":"","title":"RELATED LINKS"},{"location":"en-US/Measure-TODOComment/","text":"Measure-TODOComment SYNOPSIS Rule to detect if TODO style comments are present. SYNTAX Measure-TODOComment [-Token] <Token> [-ProgressAction <ActionPreference>] [<CommonParameters>] DESCRIPTION This rule detects if TODO style comments are present in the given ScriptBlockAst. EXAMPLES EXAMPLE 1 Measure-TODOComment -ScriptBlockAst $ScriptBlockAst This would check if the given ScriptBlockAst contains any TODO comments. PARAMETERS -Token The token to check for TODO comments. Type: Token Parameter Sets: (All) Aliases: Required: True Position: 1 Default value: None Accept pipeline input: False Accept wildcard characters: False -ProgressAction {{ Fill ProgressAction Description }} Type: ActionPreference Parameter Sets: (All) Aliases: proga Required: False Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False CommonParameters This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . INPUTS [System.Management.Automation.Language.ScriptBlockAst] OUTPUTS [Microsoft.Windows.PowerShell.ScriptAnalyzer.Generic.DiagnosticRecord[]] NOTES None RELATED LINKS","title":"Measure-TODOComment"},{"location":"en-US/Measure-TODOComment/#measure-todocomment","text":"","title":"Measure-TODOComment"},{"location":"en-US/Measure-TODOComment/#synopsis","text":"Rule to detect if TODO style comments are present.","title":"SYNOPSIS"},{"location":"en-US/Measure-TODOComment/#syntax","text":"Measure-TODOComment [-Token] <Token> [-ProgressAction <ActionPreference>] [<CommonParameters>]","title":"SYNTAX"},{"location":"en-US/Measure-TODOComment/#description","text":"This rule detects if TODO style comments are present in the given ScriptBlockAst.","title":"DESCRIPTION"},{"location":"en-US/Measure-TODOComment/#examples","text":"","title":"EXAMPLES"},{"location":"en-US/Measure-TODOComment/#example-1","text":"Measure-TODOComment -ScriptBlockAst $ScriptBlockAst This would check if the given ScriptBlockAst contains any TODO comments.","title":"EXAMPLE 1"},{"location":"en-US/Measure-TODOComment/#parameters","text":"","title":"PARAMETERS"},{"location":"en-US/Measure-TODOComment/#-token","text":"The token to check for TODO comments. Type: Token Parameter Sets: (All) Aliases: Required: True Position: 1 Default value: None Accept pipeline input: False Accept wildcard characters: False","title":"-Token"},{"location":"en-US/Measure-TODOComment/#-progressaction","text":"{{ Fill ProgressAction Description }} Type: ActionPreference Parameter Sets: (All) Aliases: proga Required: False Position: Named Default value: None Accept pipeline input: False Accept wildcard characters: False","title":"-ProgressAction"},{"location":"en-US/Measure-TODOComment/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"en-US/Measure-TODOComment/#inputs","text":"","title":"INPUTS"},{"location":"en-US/Measure-TODOComment/#systemmanagementautomationlanguagescriptblockast","text":"","title":"[System.Management.Automation.Language.ScriptBlockAst]"},{"location":"en-US/Measure-TODOComment/#outputs","text":"","title":"OUTPUTS"},{"location":"en-US/Measure-TODOComment/#microsoftwindowspowershellscriptanalyzergenericdiagnosticrecord","text":"","title":"[Microsoft.Windows.PowerShell.ScriptAnalyzer.Generic.DiagnosticRecord[]]"},{"location":"en-US/Measure-TODOComment/#notes","text":"None","title":"NOTES"},{"location":"en-US/Measure-TODOComment/#related-links","text":"","title":"RELATED LINKS"},{"location":"en-US/about_GoodEnoughRules.help/","text":"GoodEnoughRules about_GoodEnoughRules ABOUT TOPIC NOTE: The first header of the about topic should be the topic name. The second header contains the lookup name used by the help system. IE: # Some Help Topic Name ## SomeHelpTopicFileName This will be transformed into the text file as `about_SomeHelpTopicFileName`. Do not include file extensions. The second header should have no spaces. SHORT DESCRIPTION {{ Short Description Placeholder }} ABOUT TOPIC NOTE: About topics can be no longer than 80 characters wide when rendered to text. Any topics greater than 80 characters will be automatically wrapped. The generated about topic will be encoded UTF-8. LONG DESCRIPTION {{ Long Description Placeholder }} Optional Subtopics {{ Optional Subtopic Placeholder }} EXAMPLES {{ Code or descriptive examples of how to leverage the functions described. }} NOTE {{ Note Placeholder - Additional information that a user needs to know.}} TROUBLESHOOTING NOTE {{ Troubleshooting Placeholder - Warns users of bugs}} {{ Explains behavior that is likely to change with fixes }} SEE ALSO {{ See also placeholder }} {{ You can also list related articles, blogs, and video URLs. }} KEYWORDS {{List alternate names or titles for this topic that readers might use.}} {{ Keyword Placeholder }} {{ Keyword Placeholder }} {{ Keyword Placeholder }} {{ Keyword Placeholder }}","title":"GoodEnoughRules"},{"location":"en-US/about_GoodEnoughRules.help/#goodenoughrules","text":"","title":"GoodEnoughRules"},{"location":"en-US/about_GoodEnoughRules.help/#about_goodenoughrules","text":"ABOUT TOPIC NOTE: The first header of the about topic should be the topic name. The second header contains the lookup name used by the help system. IE: # Some Help Topic Name ## SomeHelpTopicFileName This will be transformed into the text file as `about_SomeHelpTopicFileName`. Do not include file extensions. The second header should have no spaces.","title":"about_GoodEnoughRules"},{"location":"en-US/about_GoodEnoughRules.help/#short-description","text":"{{ Short Description Placeholder }} ABOUT TOPIC NOTE: About topics can be no longer than 80 characters wide when rendered to text. Any topics greater than 80 characters will be automatically wrapped. The generated about topic will be encoded UTF-8.","title":"SHORT DESCRIPTION"},{"location":"en-US/about_GoodEnoughRules.help/#long-description","text":"{{ Long Description Placeholder }}","title":"LONG DESCRIPTION"},{"location":"en-US/about_GoodEnoughRules.help/#optional-subtopics","text":"{{ Optional Subtopic Placeholder }}","title":"Optional Subtopics"},{"location":"en-US/about_GoodEnoughRules.help/#examples","text":"{{ Code or descriptive examples of how to leverage the functions described. }}","title":"EXAMPLES"},{"location":"en-US/about_GoodEnoughRules.help/#note","text":"{{ Note Placeholder - Additional information that a user needs to know.}}","title":"NOTE"},{"location":"en-US/about_GoodEnoughRules.help/#troubleshooting-note","text":"{{ Troubleshooting Placeholder - Warns users of bugs}} {{ Explains behavior that is likely to change with fixes }}","title":"TROUBLESHOOTING NOTE"},{"location":"en-US/about_GoodEnoughRules.help/#see-also","text":"{{ See also placeholder }} {{ You can also list related articles, blogs, and video URLs. }}","title":"SEE ALSO"},{"location":"en-US/about_GoodEnoughRules.help/#keywords","text":"{{List alternate names or titles for this topic that readers might use.}} {{ Keyword Placeholder }} {{ Keyword Placeholder }} {{ Keyword Placeholder }} {{ Keyword Placeholder }}","title":"KEYWORDS"}]}